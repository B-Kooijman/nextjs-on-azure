@use './svg-data-uri' as *;
@use './media-query' as *;
@use 'sass:map';
@use 'sass:string';
@use 'sass:meta';

$spacing: (
  '0': 0,
  'px': 1px,
  '0.5': .125rem,
  '1': .25rem,
  '1.5': .375rem,
  '2': .5rem,
  '2.5': .625rem,
  '3': .75rem,
  '3.5': .875rem,
  '4': 1rem,
  '5': 1.25rem,
  '6': 1.5rem,
  '7': 1.75rem,
  '8': 2rem,
  '9': 2.25rem,
  '10': 2.5rem,
  '11': 2.75rem,
  '12': 3rem,
  '14': 3.5rem,
  '16': 4rem,
  '20': 5rem,
  '24': 6rem,
  '28': 7rem,
  '32': 8rem,
  '36': 9rem,
  '40': 10rem,
  '44': 11rem,
  '48': 12rem,
  '52': 13rem,
  '56': 14rem,
  '60': 15rem,
  '64': 16rem,
  '72': 18rem,
  '80': 20rem,
  '96': 24rem
) !default;

// function for using spacing values in properties
@function space($key) {
  @return map.get($spacing, #{$key});
}

//
// for generating spacing classnames in utilities
//

// prefix and property map
$space-prefixes: (
  p  : padding,
  pt : padding-top,
  pb : padding-bottom,
  pl : padding-left,
  pr : padding-right,
  ph : [padding-left, padding-right],
  pv : [padding-top, padding-bottom],
  m  : margin,
  mt : margin-top,
  mb : margin-bottom,
  ml : margin-left,
  mr : margin-right,
  mh : [margin-left, margin-right],
  mv : [margin-top, margin-bottom],
) !default;

// option to use !important
@function is-important($boolean) {
  @if $boolean {
    @return !important;
  } @else {
    @return null;
  }
}

// generate spacing classes
@mixin make-spaces($space-prefixes, $spacing, $important: false, $fix: null) {
  @each $prefix, $attr in $space-prefixes {

    // add 'auto' as value option for margins
    @if string.index($prefix, 'm') {
      .#{$prefix + $fix}-auto {
        @if meta.type-of($attr) == string {
          #{$attr}: auto is-important($important);
        } @else {
          @each $item in $attr {
            #{$item}: auto is-important($important);
          }
        }
      }
    }

    @each $name, $space in $spacing {
      .#{$prefix + $fix}-#{str-replace($name, '.', '-')} {
        @if meta.type-of($attr) == string {
          #{$attr}: $space is-important($important);
        } @else {
          @each $item in $attr {
            #{$item}: $space is-important($important);
          }
        }
      }
    }
  }
}

// create breakpoint variants of spacing classes
@mixin make-breakpoint-spaces($breakpoints, $important: false) {
  @each $name, $value in $breakpoints {
    @include mq($name) {
      @include make-spaces($space-prefixes, $spacing, $important, '-' + string.to-lower-case($name));
    }
  }
}
